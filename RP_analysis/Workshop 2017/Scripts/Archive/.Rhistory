filter(!is.na(country), !is.na(agencyName)) %>%
distinct()
combinedNames <- combinedNames %>%
filter(!paste0(country, agencyName) %in% paste0(currentRawNames$country, currentRawNames$rawName))
markoAdd <- combinedNames %>%
filter(country %in% unique(marko$country)) %>%
select(country, rawName = agencyName) %>%
mutate(finalName = NA, sources = NA, notes = NA, certainty = NA, checked = NA, checkedBy = NA, valueCorrect = NA, checkComments = NA)
markoNew <- bind_rows(marko, markoAdd) %>%
arrange(country, rawName) %>%
distinct() %>%
write_csv(., "../Raw Data Sources/Temp Files/rawNames-Marko.csv", na = "")
ritikaAdd <- combinedNames %>%
filter(country %in% unique(ritika$country)) %>%
select(country, rawName = agencyName) %>%
mutate(finalName = NA, sources = NA, notes = NA, certainty = NA, checked = NA, checkedBy = NA, valueCorrect = NA, checkComments = NA)
ritikaNew <- bind_rows(ritika, ritikaAdd) %>%
arrange(country, rawName) %>%
distinct() %>%
write_csv(., "../Raw Data Sources/Temp Files/rawNames-Ritika.csv", na = "")
remaining <- combinedNames %>%
filter(!paste0(country, agencyName) %in% unique(paste0(markoNew$country, markoNew$rawName), paste0(ritikaNew$country, ritikaNew$rawName))) %>%
arrange(country, agencyName)
View(remaining)
View(markoNew)
View(ritikaNew)
remaining <- combinedNames %>%
filter(!paste0(country, agencyName) %in% unique(paste0(markoNew$country, markoNew$rawName), paste0(ritikaNew$country, ritikaNew$rawName))) %>%
arrange(country, agencyName) %>%
write_csv(., "../Raw Data Sources/Temp Files/rawNames-Remaining.csv")
rm(list = ls())
library(tidyverse); library(ggthemes); library(kableExtra); library(knitr); library(viridis); library(readxl); library(stringr)
projectData <- read_csv("../../../Data Cleaning/Secondary Data/Projects/Data/Temp Files/projectsFinal.csv")
#snlData <- read_csv("../../Data/Secondary Data/Projects/Data/Temp Files/secondaryProjectData.csv")
snlCmdtyLocData <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_all_comdty_location.xls", sheet = 1) %>%
mutate_at(16:17, as.character) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_all_comdty_location_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlOwnership <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_ownership.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_ownership_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlFinancing <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_financing.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_financing_inactive.xls", sheet = 1)) %>%
gather(key = "round", value = "amt", -(1:2)) %>%
mutate(amt = as.numeric(amt)) %>%
group_by(`Property ID`) %>%
summarise(totalFinance = sum(amt, na.rm = T)) %>%
mutate(totalFinance = ifelse(totalFinance == 0, NA, totalFinance))
snlProduction <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_production.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_production_inactive.xls", sheet = 1)) %>%
gather(key = "name", value = "value", -(1:2)) %>%
mutate(value = as.numeric(value)) %>%
filter(!is.na(value)) %>%
arrange(`Property ID`, desc(value)) %>%
group_by(`Property ID`) %>%
filter(row_number() < 3) %>%
summarise(avgProduction = mean(value, na.rm = T))
snlData <- left_join(snlCmdtyLocData, snlOwnership, by = "Property ID") %>%
left_join(., snlFinancing, by = "Property ID") %>%
left_join(., snlProduction, by = "Property ID")
names(snlData)
snlTemp <- snlData %>%
select(snlPropID = "Property ID",
startUpYear = "Actual Start Up Year",
primaryCommodity = "Primary Commodity",
commodityList = "List of Commodities",
mineType1 = "Mine Type 1",
mineType2 = "Mine Type 2",
mineType3 = "Mine Type 3",
lat = "Latitude\n\n(degrees)",
lon = "Longitude\n\n(degrees)",
stage = "Development Stage",
status = "Activity Status",
reservesResources = "Reserves & Resources: Ore Tonnage\n\n(tonnes)",
avgProduction,
operator = "Operator Name",
operatorValue = "Operator Total Enterprise Value\n\n(Reported)",
owner = "Owner Name",
ownerValue = "Owner Total Enterprise Value\n\n(Reported)"
) %>%
mutate(reservesResources = as.numeric(reservesResources))
allData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
filter(!is.na(snlPropID))
snlTemp <- snlData %>%
select(projectCountry = "Country Name",
snlPropID = "Property ID",
startUpYear = "Actual Start Up Year",
primaryCommodity = "Primary Commodity",
stage = "Development Stage",
status = "Activity Status",
reserves = "Reserves & Resources: Ore Tonnage\n\n(tonnes)",
avgProduction) %>%
mutate(reserves = as.numeric(reserves))
snlSum <- snlTemp %>%
group_by(stage) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`)) %>%
bind_rows(., tibble(stage = "Total", `No. of SNL Projects` = nrow(snlData)))
projectSum <- projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(stage) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
bind_rows(., tibble(stage = "Total", `No. of RP Projects` = n_distinct(projectData$snlPropID)))
left_join(snlSum, projectSum, by = "stage") %>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
snlSum <- snlTemp %>%
group_by(status) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`)) %>%
bind_rows(., tibble(status = "Total", `No. of SNL Projects` = nrow(snlData)))
projectSum <- projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(status) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
bind_rows(., tibble(status = "Total", `No. of RP Projects` = n_distinct(projectData$snlPropID)))
left_join(snlSum, projectSum, by = "status")%>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
filter(status == "Inactive") %>%
group_by(stage) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
snlSum <- snlTemp %>%
group_by(primaryCommodity) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`))
projectSum <- projectData %>%
group_by(snlPropID) %>%
summarise(totPay = sum(projectPayment, na.rm = T)) %>%
ungroup() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(primaryCommodity) %>%
summarise(`No. of RP Projects` = n(),
`Tot. Payment recieved` = sum(totPay, na.rm = T),
`Avg payment (per mine)` = mean(totPay, na.rm = T),
`Std Dev of Payments` = sd(totPay, na.rm = T),
`Avg. Reserves (in tonnes)` = mean(ifelse(reserves < 0, 0, reserves), na.rm = T),
`Avg. Production (in tonnes)` = mean(ifelse(avgProduction == 0, NA, avgProduction), na.rm = T)) %>%
arrange(desc(`No. of RP Projects`))
left_join(snlSum, projectSum, by = "primaryCommodity") %>%
filter(!is.na(`No. of RP Projects`) & `No. of RP Projects` > 10) %>%
kable(., digits = 0) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
normalize <- function(vec){
maxVal <- max(vec, na.rm = T)
out <- numeric()
for(i in 1:length(vec)){
out[i] <- (vec[i]/maxVal)*100
}
out
}
left_join(snlSum, projectSum, by = "primaryCommodity") %>%
filter(!is.na(`No. of RP Projects`) & `No. of RP Projects` > 10) %>%
select(1, 3, 4, 5, 8) %>%
mutate_at(2:5, normalize) %>%
gather(key = "variable", value = "value", -1) %>%
filter(!is.nan(value)) %>%
mutate(variable = factor(variable, levels = c("No. of RP Projects", "Tot. Payment recieved", "Avg payment (per mine)", "Avg. Production (in tonnes)"))) %>%
ggplot(., aes(x = primaryCommodity, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis(discrete = T, direction = -1)
chartData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
mutate(startUpYear = as.numeric(ifelse(startUpYear == "NA", NA, startUpYear))) %>%
mutate(age = (2018 - (startUpYear)))%>%
filter(!is.na(age)) %>%
mutate(ageCat = factor(cut(age, breaks = c(0, 2, 5, 10, 20, 30, 1000)), labels = c("0 to 5", "5 to 10", "10 to 15", "15 to 20", "20 to 30", "Greater than 30"))) %>%
group_by(primaryCommodity, age) %>%
filter(projectPayment < quantile(projectPayment, 0.95) & projectPayment > 0 & age < 40) %>%
mutate(avPay = mean(projectPayment), countAge = n()) %>%
ungroup() %>%
group_by(primaryCommodity) %>%
mutate(countCom = n()) %>%
filter(countCom > 30) %>%
ungroup() %>%
mutate(primaryCommodity = paste0(primaryCommodity, " (",countCom, " obs.) "))
ggplot() +
geom_line(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay)) +
geom_point(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay), alpha = 0.4, colour = "blue") +
geom_text(data = chartData %>%
distinct(primaryCommodity, age, avPay, countAge), aes(x = age, y = avPay, label = countAge), vjust = -0.25, size = 2.5) +
geom_smooth(data = chartData, aes(x = age, y = projectPayment), method = 'loess', level = 0.9) +
facet_wrap(~primaryCommodity, ncol = 1, scales = "free_y") +
labs(x = "Age of the mine (in years)", y = "Avg. payment received (in USD)") +
theme_tufte() +
theme(legend.title = element_blank(),
strip.text.x = element_text(size = 14),
legend.position = "top",
title = element_text(size = 16),
legend.text = element_text(size = 12)
)
chartData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
mutate(startUpYear = as.numeric(ifelse(startUpYear == "NA", NA, startUpYear))) %>%
mutate(age = (2018 - (startUpYear)))%>%
filter(!is.na(age)) %>%
mutate(ageCat = factor(cut(age, breaks = c(0, 2, 5, 10, 20, 30, 1000)), labels = c("0 to 5", "5 to 10", "10 to 15", "15 to 20", "20 to 30", "Greater than 30"))) %>%
group_by(primaryCommodity, age) %>%
filter(projectPayment < quantile(projectPayment, 0.95) & projectPayment > 0 & age < 40) %>%
mutate(avPay = mean(projectPayment), countAge = n()) %>%
ungroup() %>%
group_by(primaryCommodity) %>%
mutate(countCom = n()) %>%
filter(countCom > 30) %>%
ungroup() %>%
mutate(primaryCommodity = paste0(primaryCommodity, " (",countCom, " obs.) "))
ggplot() +
geom_line(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay)) +
geom_point(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay), alpha = 0.4, colour = "blue") +
geom_text(data = chartData %>%
distinct(primaryCommodity, age, avPay, countAge), aes(x = age, y = avPay, label = countAge), vjust = -0.25, size = 2.5) +
geom_smooth(data = chartData, aes(x = age, y = projectPayment), method = 'loess', level = 0.9) +
facet_wrap(~primaryCommodity, ncol = 1, scales = "free_y") +
labs(x = "Age of the mine (in years)", y = "Avg. payment received (in USD)") +
theme_tufte() +
theme(legend.title = element_blank(),
strip.text.x = element_text(size = 14),
legend.position = "top",
title = element_text(size = 16),
legend.text = element_text(size = 12)
)
chartData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
mutate(startUpYear = as.numeric(ifelse(startUpYear == "NA", NA, startUpYear))) %>%
mutate(age = (2018 - (startUpYear)))%>%
filter(!is.na(age)) %>%
mutate(ageCat = factor(cut(age, breaks = c(0, 2, 5, 10, 20, 30, 1000)), labels = c("0 to 5", "5 to 10", "10 to 15", "15 to 20", "20 to 30", "Greater than 30"))) %>%
group_by(primaryCommodity, age) %>%
filter(projectPayment < quantile(projectPayment, 0.95) & projectPayment > 0 & age < 40) %>%
mutate(avPay = mean(projectPayment), countAge = n()) %>%
ungroup() %>%
group_by(primaryCommodity) %>%
mutate(countCom = n()) %>%
filter(countCom > 30) %>%
ungroup() %>%
mutate(primaryCommodity = paste0(primaryCommodity, " (",countCom, " obs.) "))
ggplot() +
geom_line(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay)) +
geom_point(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay), alpha = 0.4, colour = "blue") +
geom_text(data = chartData %>%
distinct(primaryCommodity, age, avPay, countAge), aes(x = age, y = avPay, label = countAge), vjust = -0.25, size = 2.5) +
geom_smooth(data = chartData, aes(x = age, y = projectPayment), method = 'loess', level = 0.9) +
facet_wrap(~primaryCommodity, ncol = 1, scales = "free_y") +
labs(x = "Age of the mine (in years)", y = "Avg. payment received (in USD)") +
theme_tufte() +
theme(legend.title = element_blank(),
strip.text.x = element_text(size = 14),
legend.position = "top",
title = element_text(size = 16),
legend.text = element_text(size = 12)
)
rm(list = ls())
library(tidyverse); library(ggthemes); library(kableExtra); library(knitr); library(viridis); library(readxl); library(stringr)
projectData <- read_csv("../../../Data Cleaning/Secondary Data/Projects/Data/Temp Files/projectsFinal.csv")
#snlData <- read_csv("../../Data/Secondary Data/Projects/Data/Temp Files/secondaryProjectData.csv")
snlCmdtyLocData <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_all_comdty_location.xls", sheet = 1) %>%
mutate_at(16:17, as.character) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_all_comdty_location_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlOwnership <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_ownership.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_ownership_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlFinancing <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_financing.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_financing_inactive.xls", sheet = 1)) %>%
gather(key = "round", value = "amt", -(1:2)) %>%
mutate(amt = as.numeric(amt)) %>%
group_by(`Property ID`) %>%
summarise(totalFinance = sum(amt, na.rm = T)) %>%
mutate(totalFinance = ifelse(totalFinance == 0, NA, totalFinance))
snlProduction <- read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_production.xls", sheet = 1) %>%
bind_rows(., read_excel("../../../Data Cleaning/Secondary Data/Projects/Data/Secondary data sources/snl_production_inactive.xls", sheet = 1)) %>%
gather(key = "name", value = "value", -(1:2)) %>%
mutate(value = as.numeric(value)) %>%
filter(!is.na(value)) %>%
arrange(`Property ID`, desc(value)) %>%
group_by(`Property ID`) %>%
filter(row_number() < 3) %>%
summarise(avgProduction = mean(value, na.rm = T))
snlData <- left_join(snlCmdtyLocData, snlOwnership, by = "Property ID") %>%
left_join(., snlFinancing, by = "Property ID") %>%
left_join(., snlProduction, by = "Property ID")
names(snlData)
snlTemp <- snlData %>%
select(snlPropID = "Property ID",
startUpYear = "Actual Start Up Year",
primaryCommodity = "Primary Commodity",
commodityList = "List of Commodities",
mineType1 = "Mine Type 1",
mineType2 = "Mine Type 2",
mineType3 = "Mine Type 3",
lat = "Latitude\n\n(degrees)",
lon = "Longitude\n\n(degrees)",
stage = "Development Stage",
status = "Activity Status",
reservesResources = "Reserves & Resources: Ore Tonnage\n\n(tonnes)",
avgProduction,
operator = "Operator Name",
operatorValue = "Operator Total Enterprise Value\n\n(Reported)",
owner = "Owner Name",
ownerValue = "Owner Total Enterprise Value\n\n(Reported)"
) %>%
mutate(reservesResources = as.numeric(reservesResources))
allData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
filter(!is.na(snlPropID))
snlTemp <- snlData %>%
select(projectCountry = "Country Name",
snlPropID = "Property ID",
startUpYear = "Actual Start Up Year",
primaryCommodity = "Primary Commodity",
stage = "Development Stage",
status = "Activity Status",
reserves = "Reserves & Resources: Ore Tonnage\n\n(tonnes)",
avgProduction) %>%
mutate(reserves = as.numeric(reserves))
snlSum <- snlTemp %>%
group_by(stage) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`)) %>%
bind_rows(., tibble(stage = "Total", `No. of SNL Projects` = nrow(snlData)))
projectSum <- projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(stage) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
bind_rows(., tibble(stage = "Total", `No. of RP Projects` = n_distinct(projectData$snlPropID)))
left_join(snlSum, projectSum, by = "stage") %>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
snlSum <- snlTemp %>%
group_by(status) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`)) %>%
bind_rows(., tibble(status = "Total", `No. of SNL Projects` = nrow(snlData)))
projectSum <- projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(status) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
bind_rows(., tibble(status = "Total", `No. of RP Projects` = n_distinct(projectData$snlPropID)))
left_join(snlSum, projectSum, by = "status")%>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
projectData %>%
select(snlPropID) %>%
unique() %>%
left_join(., snlTemp, by = "snlPropID") %>%
filter(status == "Inactive") %>%
group_by(stage) %>%
summarise(`No. of RP Projects` = n()) %>%
arrange(desc(`No. of RP Projects`)) %>%
kable(., digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
snlSum <- snlTemp %>%
group_by(primaryCommodity) %>%
summarise(`No. of SNL Projects` = n()) %>%
arrange(desc(`No. of SNL Projects`))
projectSum <- projectData %>%
group_by(snlPropID) %>%
summarise(totPay = sum(projectPayment, na.rm = T)) %>%
ungroup() %>%
left_join(., snlTemp, by = "snlPropID") %>%
group_by(primaryCommodity) %>%
summarise(`No. of RP Projects` = n(),
`Tot. Payment recieved` = sum(totPay, na.rm = T),
`Avg payment (per mine)` = mean(totPay, na.rm = T),
`Std Dev of Payments` = sd(totPay, na.rm = T),
`Avg. Reserves (in tonnes)` = mean(ifelse(reserves < 0, 0, reserves), na.rm = T),
`Avg. Production (in tonnes)` = mean(ifelse(avgProduction == 0, NA, avgProduction), na.rm = T)) %>%
arrange(desc(`No. of RP Projects`))
left_join(snlSum, projectSum, by = "primaryCommodity") %>%
filter(!is.na(`No. of RP Projects`) & `No. of RP Projects` > 10) %>%
kable(., digits = 0) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
normalize <- function(vec){
maxVal <- max(vec, na.rm = T)
out <- numeric()
for(i in 1:length(vec)){
out[i] <- (vec[i]/maxVal)*100
}
out
}
left_join(snlSum, projectSum, by = "primaryCommodity") %>%
filter(!is.na(`No. of RP Projects`) & `No. of RP Projects` > 10) %>%
select(1, 3, 4, 5, 8) %>%
mutate_at(2:5, normalize) %>%
gather(key = "variable", value = "value", -1) %>%
filter(!is.nan(value)) %>%
mutate(variable = factor(variable, levels = c("No. of RP Projects", "Tot. Payment recieved", "Avg payment (per mine)", "Avg. Production (in tonnes)"))) %>%
ggplot(., aes(x = primaryCommodity, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_viridis(discrete = T, direction = -1)
chartData <- projectData %>%
left_join(., snlTemp, by = "snlPropID") %>%
mutate(startUpYear = as.numeric(ifelse(startUpYear == "NA", NA, startUpYear))) %>%
mutate(age = (2018 - (startUpYear)))%>%
filter(!is.na(age)) %>%
mutate(ageCat = factor(cut(age, breaks = c(0, 2, 5, 10, 20, 30, 1000)), labels = c("0 to 5", "5 to 10", "10 to 15", "15 to 20", "20 to 30", "Greater than 30"))) %>%
group_by(primaryCommodity, age) %>%
filter(projectPayment < quantile(projectPayment, 0.95) & projectPayment > 0 & age < 40) %>%
mutate(avPay = mean(projectPayment), countAge = n()) %>%
ungroup() %>%
group_by(primaryCommodity) %>%
mutate(countCom = n()) %>%
filter(countCom > 30) %>%
ungroup() %>%
mutate(primaryCommodity = paste0(primaryCommodity, " (",countCom, " obs.) "))
ggplot() +
geom_line(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay)) +
geom_point(data = chartData %>%
distinct(primaryCommodity, age, avPay), aes(x = age, y = avPay), alpha = 0.4, colour = "blue") +
geom_text(data = chartData %>%
distinct(primaryCommodity, age, avPay, countAge), aes(x = age, y = avPay, label = countAge), vjust = -0.25, size = 2.5) +
geom_smooth(data = chartData, aes(x = age, y = projectPayment), method = 'loess', level = 0.9) +
facet_wrap(~primaryCommodity, ncol = 1, scales = "free_y") +
labs(x = "Age of the mine (in years)", y = "Avg. payment received (in USD)") +
theme_tufte() +
theme(legend.title = element_blank(),
strip.text.x = element_text(size = 14),
legend.position = "top",
title = element_text(size = 16),
legend.text = element_text(size = 12)
)
rm(list = ls())
library(tidyverse); library(googlesheets); library(readxl); library(stringr); library(lubridate)
backupFolders <- "/Users/hsubhash/Documents/GitHub/resource-project-data/Data Cleaning/All Data Backups/"
source("../../../Functions/Pipeline Functions/Load And Backup Data Sheets.R")
##Load all data
if(!exists("allData")){ ##avoid downloading multiple times
allData <- loadAndBackup("All data 2.0", folderPath = paste0(backupFolders, "Raw Data"))
}
rm(list = ls())
library(tidyverse); library(googlesheets); library(readxl); library(stringr); library(lubridate)
backupFolders <- "/Users/hsubhash/Documents/GitHub/resource-project-data/Data Cleaning/All Data Backups/"
source("../../../Functions/Pipeline Functions/Load And Backup Data Sheets.R")
##Load all data
if(!exists("allData")){ ##avoid downloading multiple times
allData <- loadAndBackup("All data 2.0", folderPath = paste0(backupFolders, "Raw Data Dump"))
}
allSource <- allData$sourceData %>%
filter(sourceID != "x")
allProject <- allData$projectData %>%
filter(sourceID != "x")
allEntity <- allData$entityData %>%
filter(sourceID != "x")
##Load new data
if(!exists("newData")){
newData <- loadAndBackup("Raw Tables 2.0", folderPath = paste0(backupFolders, "New Data"))
}
newSource <- newData$sourceData %>%
filter(sourceID != "x")
newProject <- newData$projectData %>%
filter(sourceID != "x") %>%
mutate(projectPayment = as.numeric(str_replace_all(projectPayment, ",", "")))
newEntity <- newData$entityData %>%
filter(sourceID != "x") %>%
mutate(entityPayment = as.numeric(str_replace_all(entityPayment, ",", "")))
combinedProject <- bind_rows(allProject, newProject)
combinedEntity <- bind_rows(allEntity, newEntity)
combinedSource <- bind_rows(allSource, newSource)
dataIDs <- unique(c(combinedProject$sourceID, combinedEntity$sourceID))
sourceIDs <- unique(combinedSource$sourceID)
combinedSource <- combinedSource %>%
filter(sourceID %in% dataIDs) %>%
arrange(reportingCompany, as.Date(reportStartDate), as.Date(sourcePublishDate))
library(hashids)
sourceKeySettings <- hashid_settings(salt = "Sourcelist", min_length = 6)
newIds <- combinedSource %>%
select(sourceID) %>%
mutate(rowNum = row_number()) %>%
rowwise() %>%
mutate(newID = paste0("src_", encode(rowNum, sourceKeySettings))) %>%
ungroup() %>%
select(sourceID, newID) %>%
write_csv(., "temp data/newIDS.csv")
finalSource <- left_join(combinedSource, newIds, by = "sourceID") %>%
mutate(sourceID = newID) %>%
select(-newID) %>%
write_csv(., "temp data/newSource.csv")
finalProject <- left_join(combinedProject, newIds, by = "sourceID") %>%
mutate(sourceID = newID) %>%
select(-newID) %>%
write_csv(., "temp data/newProject.csv")
finalEntity <- left_join(combinedEntity, newIds, by = "sourceID") %>%
mutate(sourceID = newID) %>%
select(-newID) %>%
write_csv(., "temp data/newEntity.csv")

arrange(country, sector) %>%
ungroup()
write_csv(cleanScores, "../RGI-Tool/app/public/javascripts/data/allScores.csv")
write_csv(questionFramework, "../RGI-Tool/app/public/javascripts/data/questionFramework.csv")
write_csv(questionScores, "../RGI-Tool/app/public/javascripts/data/questionScores.csv")
writexl::write_xlsx(list(questionFramework = questionFramework, questionScores = questionScores, scores = cleanScores, indicatorScores = indicatorScores, subComponentScores = subComponentScores, componentScores = componentScores, indexScores = indexScores), "Clean Data/All RGI.xlsx")
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification)
View(questionFramework)
View(questionScores)
View(questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
ansOptions
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
ansOptions[1]
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(66, questionScores)
newScores <- sapply(cleanScores$label, (x) {randomizer(x, questionScores)})
newScores <- sapply(cleanScores$label, x randomizer(x, questionScores))
newScores <- sapply(cleanScores$label, function(x) randomizer(x, questionScores))
newScores <- sapply(cleanScores$label, function(x) {x})
newScores <- sapply(cleanScores$label, function(x) {randomizer(unlist(x, use.names = F), questionScores)})
newScores <- sapply(cleanScores$questionID, function(x) {randomizer(unlist(x, use.names = F), questionScores)})
newScores <- sapply(cleanScores$questionID, function(x) {randomizer(x, questionScores)})
randomizer(cleanScores$questionID[2], questionScores)
randomizer(cleanScores[2]$questionID, questionScores)
cleanScores[2]$questionID
cleanScores$questionID
cleanScores$questionID[1]
randomizer(cleanScores$questionID[1], questionScores)
str(questionScores)
str(cleanScores)
newScores <- lapply(cleanScores$questionID, function(x) {randomizer(x, questionScores)})
newScores <- lapply(cleanScores$questionID, function(x) {x})
View(cleanScores)
newScores <- lapply(cleanScores$questionID, function(id) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
})
newScores <- lapply(cleanScores$questionID, function(id) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
# sample(ansOptions, 1)
})
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(!questionID %in% questionFramework$questionID)
newScores <- lapply(cleanScores$questionID, function(id) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
# sample(ansOptions, 1)
})
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
randomizer(cleanScores$questionID[1], questionScores)
cleanScores$questionID[1]
View(questionFramework)
View(cleanScores)
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer(cleanScores$questionID[1], questionScores)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
randomizer(cleanScores$questionID[1], questionScores)
newScores <- lapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
newScores <- sapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
newLabel <- sapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
cleanScores$label <- newLabel
cleanScores <- left_join(cleanScores, questionScores %>% select(questionID, label, score, weight), by = c("questionID", "label")) %>%
filter(!is.na(score)) %>%
mutate(score = score * weight) %>%
select(questionID, country, sector, label, justification, score)
cleanScores %>%
select(country, sector, questionID, label, score) %>%
filter(row_number() %in% sample(1:nrow(cleanScores), 10))
n_distinct(cleanScores$questionID)
n_distinct(questionFramework$questionID)
n_distinct(questionFramework$questionID)[!n_distinct(questionFramework$questionID) %in% n_distinct(cleanScores$questionID)]
unique(questionFramework$questionID)[!unique(questionFramework$questionID) %in% unique(cleanScores$questionID)]
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
View(rawScores)
View(questionFramework)
View(questionScores)
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
newLabel <- sapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
cleanScores$label <- newLabel
cleanScores <- left_join(cleanScores, questionScores %>% select(questionID, label, score, weight), by = c("questionID", "label")) %>%
filter(!is.na(score)) %>%
mutate(score = score * weight) %>%
select(questionID, country, sector, label, justification, score)
unique(questionFramework$questionID)[!unique(questionFramework$questionID) %in% unique(cleanScores$questionID)]
cleanScores %>%
select(country, sector, questionID, label, score) %>%
filter(row_number() %in% sample(1:nrow(cleanScores), 10))
questionScores <- cleanScores %>%
group_by(country, sector, questionID) %>%
summarise(justification = paste(justification, collapse = "; "), label = paste(label, collapse = "; "), score = mean(score, na.rm = T)) %>%
arrange(country, sector, questionID)
indicatorScores <- left_join(cleanScores, questionFramework, by = c("questionID")) %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
subComponentScores <- indicatorScores %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
componentScores <- subComponentScores %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
ee <- left_join(ee, indicatorScores %>% select(country, sector) %>% distinct(), by = "country") %>%
arrange(country, sector, subComponent, indicator) %>%
select(country, sector, indicator, subComponent, component, score) %>%
filter(!is.na(score))
eeIndicator <- ee %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeSubComponent <- eeIndicator %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeComponent <- eeSubComponent %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector)
if (identical(names(indicatorScores), names(eeIndicator))){
indicatorScores <- bind_rows(indicatorScores, eeIndicator) %>%
arrange(country, sector, component, subComponent, indicator) %>%
write_csv(., "../RGI-Tool/app/public/javascripts/data/indicatorScores.csv")
}else{
stop("Names of indicator table don't match")
}
if (identical(names(subComponentScores), names(eeSubComponent))){
subComponentScores <- bind_rows(subComponentScores, eeSubComponent) %>%
arrange(country, sector, component, subComponent)
}else{
stop("Names of indicator table don't match")
}
if (identical(names(componentScores), names(eeComponent))){
componentScores <- bind_rows(componentScores, eeComponent) %>%
arrange(country, sector, component)
}else{
stop("Names of indicator table don't match")
}
indexScores <- componentScores %>%
group_by(country, sector) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
write_csv(cleanScores, "../RGI-Tool/app/public/javascripts/data/allScores.csv")
write_csv(questionFramework, "../RGI-Tool/app/public/javascripts/data/questionFramework.csv")
write_csv(questionScores, "../RGI-Tool/app/public/javascripts/data/questionScores.csv")
writexl::write_xlsx(list(questionFramework = questionFramework, questionScores = questionScores, scores = cleanScores, indicatorScores = indicatorScores, subComponentScores = subComponentScores, componentScores = componentScores, indexScores = indexScores), "Clean Data/All RGI.xlsx")
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
newLabel <- sapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
cleanScores$label <- newLabel
cleanScores <- left_join(cleanScores, questionScores %>% select(questionID, label, score, weight), by = c("questionID", "label")) %>%
filter(!is.na(score)) %>%
mutate(score = score * weight) %>%
select(questionID, country, sector, label, justification, score)
cleanScores %>%
select(country, sector, questionID, label, score) %>%
filter(row_number() %in% sample(1:nrow(cleanScores), 10))
questionScores <- cleanScores %>%
group_by(country, sector, questionID) %>%
summarise(justification = paste(justification, collapse = "; "), label = paste(label, collapse = "; "), score = mean(score, na.rm = T)) %>%
arrange(country, sector, questionID)
indicatorScores <- left_join(cleanScores, questionFramework, by = c("questionID")) %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
subComponentScores <- indicatorScores %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
componentScores <- subComponentScores %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
ee <- left_join(ee, indicatorScores %>% select(country, sector) %>% distinct(), by = "country") %>%
arrange(country, sector, subComponent, indicator) %>%
select(country, sector, indicator, subComponent, component, score) %>%
filter(!is.na(score))
eeIndicator <- ee %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeSubComponent <- eeIndicator %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeComponent <- eeSubComponent %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector)
if (identical(names(indicatorScores), names(eeIndicator))){
indicatorScores <- bind_rows(indicatorScores, eeIndicator) %>%
arrange(country, sector, component, subComponent, indicator) %>%
write_csv(., "../RGI-Tool/app/public/javascripts/data/indicatorScores.csv")
}else{
stop("Names of indicator table don't match")
}
if (identical(names(subComponentScores), names(eeSubComponent))){
subComponentScores <- bind_rows(subComponentScores, eeSubComponent) %>%
arrange(country, sector, component, subComponent)
}else{
stop("Names of indicator table don't match")
}
if (identical(names(componentScores), names(eeComponent))){
componentScores <- bind_rows(componentScores, eeComponent) %>%
arrange(country, sector, component)
}else{
stop("Names of indicator table don't match")
}
indexScores <- componentScores %>%
group_by(country, sector) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
write_csv(cleanScores, "../RGI-Tool/app/public/javascripts/data/allScores.csv")
write_csv(questionFramework, "../RGI-Tool/app/public/javascripts/data/questionFramework.csv")
write_csv(questionScores, "../RGI-Tool/app/public/javascripts/data/questionScores.csv")
writexl::write_xlsx(list(questionFramework = questionFramework, questionScores = questionScores, scores = cleanScores, indicatorScores = indicatorScores, subComponentScores = subComponentScores, componentScores = componentScores, indexScores = indexScores), "Clean Data/All RGI.xlsx")
rm(list = ls())
library(tidyverse)
rawScores <- read_csv("Raw Data/Raw Reviewer Scores.csv")
questionScores <- read_csv("Clean Data/question scores.csv")
questionFramework <- read_csv("Clean Data/question framework.csv")
ee <- read_csv("Clean Data/enabling environment.csv")
cleanScores <- rawScores %>%
mutate(country_name = str_replace(country_name, " \\(oil and gas\\)| \\(mining\\)", "")) %>%
select(country = country_name, sector = version, questionID = question_order, label = FINAL, justification = final_score_justification) %>%
filter(questionID %in% questionFramework$questionID)
randomizer <- function(id, questionScores) {
ansOptions <- questionScores %>%
filter(questionID == id) %>%
select(label) %>%
unlist(use.names = F)
sample(ansOptions, 1)
}
newLabel <- sapply(cleanScores$questionID, function(id) randomizer(id, questionScores = questionScores))
cleanScores$label <- newLabel
cleanScores <- left_join(cleanScores, questionScores %>% select(questionID, label, score, weight), by = c("questionID", "label")) %>%
filter(!is.na(score)) %>%
mutate(score = score * weight) %>%
select(questionID, country, sector, label, justification, score)
cleanScores %>%
select(country, sector, questionID, label, score) %>%
filter(row_number() %in% sample(1:nrow(cleanScores), 10))
questionScores <- cleanScores %>%
group_by(country, sector, questionID) %>%
summarise(justification = paste(justification, collapse = "; "), label = paste(label, collapse = "; "), score = mean(score, na.rm = T)) %>%
arrange(country, sector, questionID)
indicatorScores <- left_join(cleanScores, questionFramework, by = c("questionID")) %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
subComponentScores <- indicatorScores %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
componentScores <- subComponentScores %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
ee <- left_join(ee, indicatorScores %>% select(country, sector) %>% distinct(), by = "country") %>%
arrange(country, sector, subComponent, indicator) %>%
select(country, sector, indicator, subComponent, component, score) %>%
filter(!is.na(score))
eeIndicator <- ee %>%
group_by(country, sector, indicator) %>%
summarise(subComponent = unique(subComponent), component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeSubComponent <- eeIndicator %>%
group_by(country, sector, subComponent) %>%
summarise(component = unique(component), score = mean(score, na.rm = T)) %>%
arrange(country, sector)
eeComponent <- eeSubComponent %>%
group_by(country, sector, component) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector)
if (identical(names(indicatorScores), names(eeIndicator))){
indicatorScores <- bind_rows(indicatorScores, eeIndicator) %>%
arrange(country, sector, component, subComponent, indicator) %>%
write_csv(., "../RGI-Tool/app/public/javascripts/data/indicatorScores.csv")
}else{
stop("Names of indicator table don't match")
}
if (identical(names(subComponentScores), names(eeSubComponent))){
subComponentScores <- bind_rows(subComponentScores, eeSubComponent) %>%
arrange(country, sector, component, subComponent)
}else{
stop("Names of indicator table don't match")
}
if (identical(names(componentScores), names(eeComponent))){
componentScores <- bind_rows(componentScores, eeComponent) %>%
arrange(country, sector, component)
}else{
stop("Names of indicator table don't match")
}
indexScores <- componentScores %>%
group_by(country, sector) %>%
summarise(score = mean(score, na.rm = T)) %>%
arrange(country, sector) %>%
ungroup()
write_csv(cleanScores, "../RGI-Tool/app/public/javascripts/data/allScores.csv")
write_csv(questionFramework, "../RGI-Tool/app/public/javascripts/data/questionFramework.csv")
write_csv(questionScores, "../RGI-Tool/app/public/javascripts/data/questionScores.csv")
writexl::write_xlsx(list(questionFramework = questionFramework, questionScores = questionScores, scores = cleanScores, indicatorScores = indicatorScores, subComponentScores = subComponentScores, componentScores = componentScores, indexScores = indexScores), "Clean Data/All RGI.xlsx")

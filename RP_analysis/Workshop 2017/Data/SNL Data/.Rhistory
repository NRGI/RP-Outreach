if (!is.character(sv)) stop("'sv' must be a string vector")
if (!alreadyTrimmed) sv = gsub("[[:space:]]*$", "", gsub("^[[:space:]]*", "", sv))
if (capIsNew) {
sv = gsub("([A-Z])", " \\1", sv)
sv = gsub("^[[:space:]]", "", sv)
sv = tolower(sv)
}
apart = strsplit(sv, split="[[:space:][:punct:]]")
apart = lapply(apart, tolower)
capitalize = function(x) paste0(toupper(substring(x,1,1)), substring(x,2))
if (upper) {
apart = lapply(apart, capitalize)
} else {
apart = lapply(apart, function(x) c(x[1], capitalize(x[-1])))
}
return(sapply(apart, paste, collapse=""))
}
snlCmdtyLocData <- read_excel("SNL Downloads/snl_all_comdty_location.xls", sheet = 1) %>%
mutate_at(16:17, as.character) %>%
bind_rows(., read_excel("SNL Downloads/snl_all_comdty_location_inactive.xls", sheet = 1)) %>%
select(1, 14:18, 2:13, 19:22)
#%>%
#select(-(`Property Name`))
snlOwnership <- read_excel("SNL Downloads/snl_ownership.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_ownership_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlFinancing <- read_excel("SNL Downloads/snl_financing.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_financing_inactive.xls", sheet = 1)) %>%
gather(key = "round", value = "amt", -(1:2)) %>%
mutate(amt = as.numeric(amt)) %>%
group_by(`Property ID`) %>%
summarise(totalFinance = sum(amt, na.rm = T)) %>%
mutate(totalFinance = ifelse(totalFinance == 0, NA, totalFinance))
snlProduction <- read_excel("SNL Downloads/snl_production.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_production_inactive.xls", sheet = 1)) %>%
gather(key = "name", value = "value", -(1:2)) %>%
mutate(value = as.numeric(value)) %>%
filter(!is.na(value)) %>%
arrange(`Property ID`, desc(value)) %>%
group_by(`Property ID`) %>%
filter(row_number() < 3) %>%
summarise(avgProduction = mean(value, na.rm = T))
library(tidyverse); library(readxl)
camelCase = function(sv, upper=FALSE, capIsNew=FALSE, alreadyTrimmed=FALSE) {
if (!is.character(sv)) stop("'sv' must be a string vector")
if (!alreadyTrimmed) sv = gsub("[[:space:]]*$", "", gsub("^[[:space:]]*", "", sv))
if (capIsNew) {
sv = gsub("([A-Z])", " \\1", sv)
sv = gsub("^[[:space:]]", "", sv)
sv = tolower(sv)
}
apart = strsplit(sv, split="[[:space:][:punct:]]")
apart = lapply(apart, tolower)
capitalize = function(x) paste0(toupper(substring(x,1,1)), substring(x,2))
if (upper) {
apart = lapply(apart, capitalize)
} else {
apart = lapply(apart, function(x) c(x[1], capitalize(x[-1])))
}
return(sapply(apart, paste, collapse=""))
}
snlCmdtyLocData <- read_excel("SNL Downloads/snl_all_comdty_location.xls", sheet = 1) %>%
mutate_at(16:17, as.character) %>%
bind_rows(., read_excel("SNL Downloads/snl_all_comdty_location_inactive.xls", sheet = 1)) %>%
select(1, 14:18, 2:13, 19:22)
#%>%
#select(-(`Property Name`))
snlOwnership <- read_excel("SNL Downloads/snl_ownership.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_ownership_inactive.xls", sheet = 1)) %>%
select(-(`Property Name`))
snlFinancing <- read_excel("SNL Downloads/snl_financing.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_financing_inactive.xls", sheet = 1)) %>%
gather(key = "round", value = "amt", -(1:2)) %>%
mutate(amt = as.numeric(amt)) %>%
group_by(`Property ID`) %>%
summarise(totalFinance = sum(amt, na.rm = T)) %>%
mutate(totalFinance = ifelse(totalFinance == 0, NA, totalFinance))
snlProduction <- read_excel("SNL Downloads/snl_production.xls", sheet = 1) %>%
bind_rows(., read_excel("SNL Downloads/snl_production_inactive.xls", sheet = 1)) %>%
gather(key = "name", value = "value", -(1:2)) %>%
mutate(value = as.numeric(value)) %>%
filter(!is.na(value)) %>%
arrange(`Property ID`, desc(value)) %>%
group_by(`Property ID`) %>%
filter(row_number() < 3) %>%
summarise(avgProduction = mean(value, na.rm = T))
snlData <- left_join(snlCmdtyLocData, snlOwnership, by = "Property ID") %>%
left_join(., snlFinancing, by = "Property ID") %>%
left_join(., snlProduction, by = "Property ID")
##remove escape chars from the names
names(snlData) <- str_replace_all(names(snlData), "[[:cntrl:]]", " ") %>%
str_replace(., "  ", " ") %>%
str_replace_all(., " ", "_") %>%
camelCase()
##save the data for later use
snlData <- snlData %>%
arrange(countryName, propertyName, stateProvince)
write_csv(snlData, "Clean Data/snlCompiled.csv")
rm(list = ls())
library(tidyverse); library(googlesheets);library(readxl)
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
source("../../../../Functions/Cleaning Functions/Clean Chars.R")
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
addToLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Add to Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv") %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment)
addProjects <- gs_title("New Data Input") %>%
gs_read(ws = "Project", verbose = F) %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment) %>%
mutate(projectPayment = as.numeric(projectPayment)) %>%
filter(projectName != "x")
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"))
currentProjectData <- bind_rows(currentProjectData, addProjects)
lookupMatched <- addToLookup %>%
filter(finalName != "NA" & !is.na(finalName)) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>% ##don't add if already present
group_by(projectCountry, rawName) %>%
filter(n() < 2) %>% ##remove any duplicates
ungroup() %>%
select(projectCountry, rawName, finalName, notes, sources)
currentLookup <- bind_rows(currentLookup, lookupMatched) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>% ##remove projects with unclear country names
filter(!is.na(projectCountry)) %>%
write_csv(.,"../Data/Current Matched Lookup.csv", na = "")
rm(list = ls())
library(tidyverse); library(googlesheets);library(readxl)
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
source("../../../../Functions/Cleaning Functions/Clean Chars.R")
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
addToLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Add to Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv") %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment)
addProjects <- gs_title("New Data Input") %>%
gs_read(ws = "Project", verbose = F) %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment) %>%
mutate(projectPayment = as.numeric(projectPayment)) %>%
filter(projectName != "x")
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"))
currentProjectData <- bind_rows(currentProjectData, addProjects)
lookupMatched <- addToLookup %>%
filter(finalName != "NA" & !is.na(finalName)) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>% ##don't add if already present
group_by(projectCountry, rawName) %>%
filter(n() < 2) %>% ##remove any duplicates
ungroup() %>%
select(projectCountry, rawName, finalName, notes, sources)
if(identical(names(lookupMatched), names(currentLookup))){
currentLookup <- bind_rows(currentLookup, lookupMatched) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>% ##remove projects with unclear country names
filter(!is.na(projectCountry)) %>%
write_csv(.,"../Data/Current Matched Lookup.csv", na = "")
} else {
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
View(currentLookup)
lookupNotMatched <- addToLookup %>%
filter(finalName == "NA" | is.na(finalName)) %>%
mutate(finalName = ifelse(str_to_lower(finalName) %in% c("nan", "na"), NA, finalName),
checked = TRUE) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>%
select(projectCountry, reportingCompany, rawName, finalName, notes, sources, checked)
unMatchedProjects <- currentProjectData %>%
filter(!paste0(projectCountry, projectName) %in% unique(c(paste0(currentLookup$projectCountry, currentLookup$rawName),                                                              paste0(lookupNotMatched$projectCountry, lookupNotMatched$rawName)))) %>% ##check if it has already been added
select(projectCountry, reportingCompany, rawName = projectName) %>%
distinct() %>%
mutate(finalName = NA, notes = NA, sources = NA, checked = FALSE)
if(identical(names(lookupNotMatched), names(unMatchedProjects))){
lookupNotMatched <- bind_rows(lookupNotMatched, unMatchedProjects) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry)) %>%
distinct() %>%
arrange(projectCountry, rawName, reportingCompany) %>%
write_csv(., "../Data/Lookup Unmatched.csv", na = "")
} else {
warning("Warning : The variable names did not match, NAs were introduced through coercion")
}
View(unMatchedProjects)
rm(list = ls())
library(tidyverse); library(googlesheets);library(readxl)
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
source("../../../../Functions/Cleaning Functions/Clean Chars.R")
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
addToLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Add to Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv") %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment)
addProjects <- gs_title("New Data Input") %>%
gs_read(ws = "Project", verbose = F) %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment) %>%
mutate(projectPayment = as.numeric(projectPayment)) %>%
filter(projectName != "x")
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"))
currentProjectData <- bind_rows(currentProjectData, addProjects)
lookupMatched <- addToLookup %>%
filter(finalName != "NA" & !is.na(finalName)) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>% ##don't add if already present
group_by(projectCountry, rawName) %>%
filter(n() < 2) %>% ##remove any duplicates
ungroup() %>%
select(projectCountry, rawName, finalName, notes, sources)
if(identical(names(lookupMatched), names(currentLookup))){
currentLookup <- bind_rows(currentLookup, lookupMatched) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>% ##remove projects with unclear country names
filter(!is.na(projectCountry) & projectCountry == "Could not be identified") %>%
write_csv(.,"../Data/Current Matched Lookup.csv", na = "")
} else {
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
lookupNotMatched <- addToLookup %>%
filter(finalName == "NA" | is.na(finalName)) %>%
mutate(finalName = ifelse(str_to_lower(finalName) %in% c("nan", "na"), NA, finalName),
checked = TRUE) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>%
select(projectCountry, reportingCompany, rawName, finalName, notes, sources, checked)
unMatchedProjects <- currentProjectData %>%
filter(!paste0(projectCountry, projectName) %in% unique(c(paste0(currentLookup$projectCountry, currentLookup$rawName),                                                              paste0(lookupNotMatched$projectCountry, lookupNotMatched$rawName)))) %>% ##check if it has already been added
select(projectCountry, reportingCompany, rawName = projectName) %>%
distinct() %>%
mutate(finalName = NA, notes = NA, sources = NA, checked = FALSE)
if(identical(names(lookupNotMatched), names(unMatchedProjects))){
lookupNotMatched <- bind_rows(lookupNotMatched, unMatchedProjects) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry) & projectCountry == "Could not be identified") %>%
distinct() %>%
arrange(projectCountry, rawName, reportingCompany) %>%
write_csv(., "../Data/Lookup Unmatched.csv", na = "")
} else {
warning("Warning : The variable names did not match, NAs were introduced through coercion")
}
rm(list = ls())
library(tidyverse); library(googlesheets);library(readxl)
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
source("../../../../Functions/Cleaning Functions/Clean Chars.R")
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
addToLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Add to Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv") %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment)
addProjects <- gs_title("New Data Input") %>%
gs_read(ws = "Project", verbose = F) %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment) %>%
mutate(projectPayment = as.numeric(projectPayment)) %>%
filter(projectName != "x")
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"))
currentProjectData <- bind_rows(currentProjectData, addProjects)
lookupMatched <- addToLookup %>%
filter(finalName != "NA" & !is.na(finalName)) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>% ##don't add if already present
group_by(projectCountry, rawName) %>%
filter(n() < 2) %>% ##remove any duplicates
ungroup() %>%
select(projectCountry, rawName, finalName, notes, sources)
if(identical(names(lookupMatched), names(currentLookup))){
currentLookup <- bind_rows(currentLookup, lookupMatched) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>% ##remove projects with unclear country names
filter(!is.na(projectCountry) & projectCountry != "Could not be identified") %>%
write_csv(.,"../Data/Current Matched Lookup.csv", na = "")
} else {
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
lookupNotMatched <- addToLookup %>%
filter(finalName == "NA" | is.na(finalName)) %>%
mutate(finalName = ifelse(str_to_lower(finalName) %in% c("nan", "na"), NA, finalName),
checked = TRUE) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>%
select(projectCountry, reportingCompany, rawName, finalName, notes, sources, checked)
unMatchedProjects <- currentProjectData %>%
filter(!paste0(projectCountry, projectName) %in% unique(c(paste0(currentLookup$projectCountry, currentLookup$rawName),                                                              paste0(lookupNotMatched$projectCountry, lookupNotMatched$rawName)))) %>% ##check if it has already been added
select(projectCountry, reportingCompany, rawName = projectName) %>%
distinct() %>%
mutate(finalName = NA, notes = NA, sources = NA, checked = FALSE)
if(identical(names(lookupNotMatched), names(unMatchedProjects))){
lookupNotMatched <- bind_rows(lookupNotMatched, unMatchedProjects) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry) & projectCountry != "Could not be identified") %>%
distinct() %>%
arrange(projectCountry, rawName, reportingCompany) %>%
write_csv(., "../Data/Lookup Unmatched.csv", na = "")
} else {
warning("Warning : The variable names did not match, NAs were introduced through coercion")
}
View(lookupNotMatched)
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"), projectName = cleanCharacters(projectName))
View(addProjects)
rm(list = ls())
library(tidyverse); library(googlesheets);library(readxl)
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
source("../../../../Functions/Cleaning Functions/Clean Chars.R")
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
addToLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Add to Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv") %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment)
addProjects <- gs_title("New Data Input") %>%
gs_read(ws = "Project", verbose = F) %>%
select(projectCountry, reportingCompany, projectName, paymentType, projectPayment) %>%
mutate(projectPayment = as.numeric(projectPayment)) %>%
filter(projectName != "x")
addProjects <- addProjects %>%
mutate(projectCountry = cleanValues(projectCountry, "Country"), projectName = cleanCharacters(projectName))
currentProjectData <- bind_rows(currentProjectData, addProjects)
lookupMatched <- addToLookup %>%
filter(finalName != "NA" & !is.na(finalName)) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>% ##don't add if already present
group_by(projectCountry, rawName) %>%
filter(n() < 2) %>% ##remove any duplicates
ungroup() %>%
select(projectCountry, rawName, finalName, notes, sources)
if(identical(names(lookupMatched), names(currentLookup))){
currentLookup <- bind_rows(currentLookup, lookupMatched) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>% ##remove projects with unclear country names
filter(!is.na(projectCountry) & projectCountry != "Could not be identified") %>%
arrange(projectCountry, rawName) %>%
write_csv(.,"../Data/Current Matched Lookup.csv", na = "")
} else {
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
lookupNotMatched <- addToLookup %>%
filter(finalName == "NA" | is.na(finalName)) %>%
mutate(finalName = ifelse(str_to_lower(finalName) %in% c("nan", "na"), NA, finalName),
checked = TRUE) %>%
filter(!paste0(projectCountry, rawName) %in% unique(paste0(currentLookup$projectCountry, currentLookup$rawName))) %>%
select(projectCountry, reportingCompany, rawName, finalName, notes, sources, checked)
unMatchedProjects <- currentProjectData %>%
filter(!paste0(projectCountry, projectName) %in% unique(c(paste0(currentLookup$projectCountry, currentLookup$rawName),                                                              paste0(lookupNotMatched$projectCountry, lookupNotMatched$rawName)))) %>% ##check if it has already been added
select(projectCountry, reportingCompany, rawName = projectName) %>%
distinct() %>%
mutate(finalName = NA, notes = NA, sources = NA, checked = FALSE)
if(identical(names(lookupNotMatched), names(unMatchedProjects))){
lookupNotMatched <- bind_rows(lookupNotMatched, unMatchedProjects) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry) & projectCountry != "Could not be identified") %>%
distinct() %>%
arrange(projectCountry, rawName, reportingCompany) %>%
write_csv(., "../Data/Lookup Unmatched.csv", na = "")
} else {
warning("Warning : The variable names did not match, NAs were introduced through coercion")
}
View(lookupNotMatched)
View(lookupNotMatched)
rm(list = ls())
library(tidyverse); library(googlesheets)
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
source("../../../../Functions/Pipeline Functions/Add Raw Vals to Reconcile Sheet.R")
source("../../../../Functions/Pipeline Functions/Update Lookup using Reconcile Sheet.R")
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
##Load the current add pipeline
secondaryMissing <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Add to Secondary", verbose = F)
##load current secondary
currentSecondary <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Secondary Data", verbose = F)
##Load the current lookup
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
rm(list = ls())
library(tidyverse); library(googlesheets)
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
source("../../../../Functions/Pipeline Functions/Add Raw Vals to Reconcile Sheet.R")
source("../../../../Functions/Pipeline Functions/Update Lookup using Reconcile Sheet.R")
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
##Load the current add pipeline
secondaryMissing <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Add to Secondary", verbose = F)
##load current secondary
currentSecondary <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Secondary Data", verbose = F)
##Load the current lookup
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv")
##Add data from current secondary that are still missing or incomplete back to the secondary missing data (currently set to project type and location)
secondaryMissing <- bind_rows(secondaryMissing, currentSecondary %>% filter(is.na(projectType) | is.na(lat) | is.na(lon)))
##update the current secondary data (i.e. remove the obs from previous step)
currentSecondary <- currentSecondary %>%
filter(!paste0(projectCountry, finalName) %in% paste0(secondaryMissing$projectCountry, secondaryMissing$finalName))
##identify the secondary data that is ready to be added to the main sheet
secondaryAdd <- secondaryMissing %>%
filter(!is.na(projectType) & !is.na(lat) & !is.na(lon)) %>%
filter(!paste0(projectCountry, finalName) %in% paste0(currentSecondary$projectCountry, currentSecondary$finalName))
##update the secondary missing data by removing those that are in the current secondary
secondaryMissing <- secondaryMissing %>%
filter(!paste0(projectCountry, finalName) %in% unique(paste0(currentSecondary$projectCountry, currentSecondary$finalName)))
##add new final names from the current lookup file
lookupAdd <- currentLookup %>%
filter(!paste0(projectCountry, finalName) %in% unique(c(paste0(currentSecondary$projectCountry, currentSecondary$finalName), paste0(secondaryMissing$projectCountry, secondaryMissing$finalName)))) %>%
mutate(projectType = NA, snlPropID = NA, commodity = NA, lat = NA, lon = NA, locationType = NA) %>%
select(projectCountry, finalName, projectType, snlPropID, commodity, lat, lon, locationType, sources, notes)
if(identical(names(secondaryMissing), names(lookupAdd))){
secondaryMissing <- bind_rows(secondaryMissing, lookupAdd) %>%
distinct() %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry)) %>%
arrange(projectCountry, finalName) %>%
mutate(projectType = case_when(
str_detect(str_to_lower(projectType), "corporate") ~ "Corporate",
str_detect(str_to_lower(projectType), "oil") ~ "Oil & Gas",
str_detect(str_to_lower(projectType), "mining") ~ "Mining",
str_detect(str_to_lower(projectType), "other") ~ "Other"
)) %>%
mutate(locationType = case_when(
str_detect(str_to_lower(locationType), "exact") ~ "Exact",
str_detect(str_to_lower(locationType), "capital") ~ "Regional Capital",
str_detect(str_to_lower(locationType), "nearest town") ~ "Nearest Town",
str_detect(str_to_lower(locationType), "estimated") ~ "Estimated"
)) %>%
mutate(commodity = str_replace_all(commodity, ", , ,", "") %>%
str_replace_all(., ", ,", "")) %>%
write_csv(., "../Data/Secondary Missing.csv", na ="")
} else{
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
View(secondaryMissing)
rm(list = ls())
library(tidyverse); library(googlesheets)
source("../../../../Functions/Cleaning Functions/Reconcile Values Using Lookups.R")
source("../../../../Functions/Pipeline Functions/Add Raw Vals to Reconcile Sheet.R")
source("../../../../Functions/Pipeline Functions/Update Lookup using Reconcile Sheet.R")
gs_auth("/Users/hsubhash/Documents/GitHub/resource-project-data/token.rds")
##Load the current add pipeline
secondaryMissing <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Add to Secondary", verbose = F)
##load current secondary
currentSecondary <- gs_title("Current Secondary - Projects") %>%
gs_read(ws = "Secondary Data", verbose = F)
##Load the current lookup
currentLookup <- gs_title("Current Lookup - Projects") %>%
gs_read(ws = "Current Matched Lookup", verbose = F)
currentProjectData <- read_csv("../../../../Data Cleaning/Payment Data Pipeline/data/Current website data/allProject.csv")
##Add data from current secondary that are still missing or incomplete back to the secondary missing data (currently set to project type and location)
secondaryMissing <- bind_rows(secondaryMissing, currentSecondary %>% filter(is.na(projectType) | is.na(lat) | is.na(lon)))
##update the current secondary data (i.e. remove the obs from previous step)
currentSecondary <- currentSecondary %>%
filter(!paste0(projectCountry, finalName) %in% paste0(secondaryMissing$projectCountry, secondaryMissing$finalName))
##identify the secondary data that is ready to be added to the main sheet
secondaryAdd <- secondaryMissing %>%
filter(!is.na(projectType) & !is.na(lat) & !is.na(lon)) %>%
filter(!paste0(projectCountry, finalName) %in% paste0(currentSecondary$projectCountry, currentSecondary$finalName))
if(identical(names(currentSecondary), names(secondaryAdd))){
##add to current secondary and clean
currentSecondary <- bind_rows(currentSecondary, secondaryAdd) %>%
mutate(projectType = case_when(
str_detect(str_to_lower(projectType), "corporate") ~ "Corporate",
str_detect(str_to_lower(projectType), "oil") ~ "Oil & Gas",
str_detect(str_to_lower(projectType), "mining") ~ "Mining",
str_detect(str_to_lower(projectType), "other") ~ "Other"
)) %>%
mutate(locationType = case_when(
str_detect(str_to_lower(locationType), "exact") ~ "Exact",
str_detect(str_to_lower(locationType), "capital") ~ "Regional Capital",
str_detect(str_to_lower(locationType), "nearest town") ~ "Nearest Town",
str_detect(str_to_lower(locationType), "estimated") ~ "Estimated"
)) %>%
mutate(commodity = str_replace_all(commodity, ", , ,", "") %>%
str_replace_all(., ", ,", "")) %>%
arrange(projectCountry, finalName) %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry)) %>%
distinct() %>%
write_csv(., "../Data/Current Secondary.csv", na = "")
} else {
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
##update the secondary missing data by removing those that are in the current secondary
secondaryMissing <- secondaryMissing %>%
filter(!paste0(projectCountry, finalName) %in% unique(paste0(currentSecondary$projectCountry, currentSecondary$finalName)))
##add new final names from the current lookup file
lookupAdd <- currentLookup %>%
filter(!paste0(projectCountry, finalName) %in% unique(c(paste0(currentSecondary$projectCountry, currentSecondary$finalName), paste0(secondaryMissing$projectCountry, secondaryMissing$finalName)))) %>%
mutate(projectType = NA, snlPropID = NA, commodity = NA, lat = NA, lon = NA, locationType = NA) %>%
select(projectCountry, finalName, projectType, snlPropID, commodity, lat, lon, locationType, sources, notes)
if(identical(names(secondaryMissing), names(lookupAdd))){
secondaryMissing <- bind_rows(secondaryMissing, lookupAdd) %>%
distinct() %>%
mutate(projectCountry = cleanValues(projectCountry, "Country")) %>%
filter(!is.na(projectCountry)) %>%
arrange(projectCountry, finalName) %>%
mutate(projectType = case_when(
str_detect(str_to_lower(projectType), "corporate") ~ "Corporate",
str_detect(str_to_lower(projectType), "oil") ~ "Oil & Gas",
str_detect(str_to_lower(projectType), "mining") ~ "Mining",
str_detect(str_to_lower(projectType), "other") ~ "Other"
)) %>%
mutate(locationType = case_when(
str_detect(str_to_lower(locationType), "exact") ~ "Exact",
str_detect(str_to_lower(locationType), "capital") ~ "Regional Capital",
str_detect(str_to_lower(locationType), "nearest town") ~ "Nearest Town",
str_detect(str_to_lower(locationType), "estimated") ~ "Estimated"
)) %>%
mutate(commodity = str_replace_all(commodity, ", , ,", "") %>%
str_replace_all(., ", ,", "")) %>%
write_csv(., "../Data/Secondary Missing.csv", na ="")
} else{
warning("Warning : The variable names do not match, NAs were introduced through coercion")
}
